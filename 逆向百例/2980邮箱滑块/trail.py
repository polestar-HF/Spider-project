import math
import random

import numpy as np
import matplotlib.pyplot as plt

trail_1 = [
    [
        0,
        0,
        1655992806103
    ],
    [
        2,
        -1,
        1655992806228
    ],
    [
        4,
        -1,
        1655992806236
    ],
    [
        7,
        -1,
        1655992806244
    ],
    [
        10,
        -1,
        1655992806253
    ],
    [
        14,
        -1,
        1655992806260
    ],
    [
        17,
        -1,
        1655992806268
    ],
    [
        20,
        -1,
        1655992806275
    ],
    [
        22,
        -1,
        1655992806282
    ],
    [
        25,
        -1,
        1655992806291
    ],
    [
        27,
        -1,
        1655992806299
    ],
    [
        29,
        -1,
        1655992806306
    ],
    [
        31,
        -1,
        1655992806315
    ],
    [
        32,
        -1,
        1655992806322
    ],
    [
        33,
        -1,
        1655992806331
    ],
    [
        35,
        -1,
        1655992806338
    ],
    [
        36,
        -1,
        1655992806347
    ],
    [
        37,
        -1,
        1655992806355
    ],
    [
        38,
        -1,
        1655992806362
    ],
    [
        40,
        -1,
        1655992806368
    ],
    [
        41,
        -1,
        1655992806376
    ],
    [
        43,
        -1,
        1655992806384
    ],
    [
        44,
        -1,
        1655992806392
    ],
    [
        46,
        -1,
        1655992806400
    ],
    [
        47,
        -1,
        1655992806409
    ],
    [
        48,
        -1,
        1655992806416
    ],
    [
        50,
        -1,
        1655992806425
    ],
    [
        51,
        -1,
        1655992806432
    ],
    [
        52,
        -1,
        1655992806456
    ],
    [
        53,
        -1,
        1655992806486
    ],
    [
        54,
        -1,
        1655992806502
    ],
    [
        55,
        -1,
        1655992806510
    ],
    [
        56,
        -1,
        1655992806519
    ],
    [
        57,
        -1,
        1655992806526
    ],
    [
        59,
        -1,
        1655992806542
    ],
    [
        61,
        -1,
        1655992806550
    ],
    [
        62,
        -1,
        1655992806556
    ],
    [
        63,
        -1,
        1655992806564
    ],
    [
        65,
        0,
        1655992806572
    ],
    [
        66,
        0,
        1655992806580
    ],
    [
        67,
        0,
        1655992806588
    ],
    [
        69,
        1,
        1655992806597
    ],
    [
        71,
        1,
        1655992806604
    ],
    [
        72,
        1,
        1655992806612
    ],
    [
        73,
        1,
        1655992806620
    ],
    [
        75,
        1,
        1655992806628
    ],
    [
        76,
        1,
        1655992806636
    ],
    [
        77,
        1,
        1655992806642
    ],
    [
        78,
        1,
        1655992806650
    ],
    [
        80,
        1,
        1655992806658
    ],
    [
        81,
        1,
        1655992806667
    ],
    [
        82,
        1,
        1655992806674
    ],
    [
        84,
        1,
        1655992806682
    ],
    [
        85,
        1,
        1655992806690
    ],
    [
        86,
        2,
        1655992806698
    ],
    [
        87,
        2,
        1655992806708
    ],
    [
        88,
        2,
        1655992806714
    ],
    [
        89,
        2,
        1655992806723
    ],
    [
        90,
        2,
        1655992806736
    ],
    [
        91,
        3,
        1655992807038
    ],
    [
        92,
        3,
        1655992807046
    ],
    [
        93,
        3,
        1655992807055
    ],
    [
        94,
        3,
        1655992807070
    ],
    [
        95,
        3,
        1655992807168
    ],
    [
        96,
        3,
        1655992807196
    ]
]
trail_2 = [
    [
        0,
        0,
        1655993174890
    ],
    [
        1,
        0,
        1655993174989
    ],
    [
        3,
        1,
        1655993174996
    ],
    [
        4,
        3,
        1655993175004
    ],
    [
        6,
        3,
        1655993175012
    ],
    [
        7,
        4,
        1655993175019
    ],
    [
        8,
        4,
        1655993175025
    ],
    [
        9,
        5,
        1655993175034
    ],
    [
        10,
        5,
        1655993175049
    ],
    [
        11,
        5,
        1655993175058
    ],
    [
        12,
        5,
        1655993175082
    ],
    [
        13,
        5,
        1655993175118
    ],
    [
        14,
        5,
        1655993175136
    ],
    [
        15,
        5,
        1655993175143
    ],
    [
        16,
        5,
        1655993175176
    ],
    [
        17,
        5,
        1655993175196
    ],
    [
        18,
        5,
        1655993175210
    ],
    [
        19,
        5,
        1655993175222
    ],
    [
        20,
        5,
        1655993175238
    ],
    [
        21,
        5,
        1655993175254
    ],
    [
        23,
        5,
        1655993175261
    ],
    [
        24,
        5,
        1655993175270
    ],
    [
        25,
        5,
        1655993175278
    ],
    [
        27,
        5,
        1655993175285
    ],
    [
        28,
        5,
        1655993175294
    ],
    [
        29,
        5,
        1655993175302
    ],
    [
        30,
        5,
        1655993175308
    ],
    [
        32,
        5,
        1655993175316
    ],
    [
        33,
        5,
        1655993175323
    ],
    [
        34,
        5,
        1655993175332
    ],
    [
        35,
        5,
        1655993175340
    ],
    [
        36,
        5,
        1655993175348
    ],
    [
        37,
        5,
        1655993175356
    ],
    [
        39,
        5,
        1655993175363
    ],
    [
        40,
        5,
        1655993175372
    ],
    [
        41,
        6,
        1655993175379
    ],
    [
        43,
        6,
        1655993175388
    ],
    [
        44,
        6,
        1655993175395
    ],
    [
        45,
        7,
        1655993175403
    ],
    [
        46,
        7,
        1655993175410
    ],
    [
        47,
        7,
        1655993175429
    ],
    [
        48,
        7,
        1655993175438
    ],
    [
        49,
        7,
        1655993175454
    ],
    [
        50,
        7,
        1655993175461
    ],
    [
        51,
        7,
        1655993175484
    ],
    [
        52,
        7,
        1655993175497
    ],
    [
        53,
        7,
        1655993175516
    ],
    [
        54,
        7,
        1655993175523
    ],
    [
        55,
        7,
        1655993175532
    ],
    [
        57,
        7,
        1655993175539
    ],
    [
        58,
        7,
        1655993175548
    ],
    [
        59,
        7,
        1655993175556
    ],
    [
        60,
        7,
        1655993175564
    ],
    [
        61,
        7,
        1655993175572
    ],
    [
        63,
        7,
        1655993175586
    ]
]
trail_3 = [
    [
        0,
        0,
        1655993245339
    ],
    [
        4,
        0,
        1655993245469
    ],
    [
        9,
        0,
        1655993245476
    ],
    [
        15,
        0,
        1655993245482
    ],
    [
        20,
        0,
        1655993245490
    ],
    [
        26,
        0,
        1655993245498
    ],
    [
        31,
        1,
        1655993245507
    ],
    [
        35,
        1,
        1655993245514
    ],
    [
        39,
        1,
        1655993245523
    ],
    [
        42,
        2,
        1655993245530
    ],
    [
        45,
        2,
        1655993245538
    ],
    [
        48,
        2,
        1655993245546
    ],
    [
        50,
        2,
        1655993245554
    ],
    [
        52,
        2,
        1655993245563
    ],
    [
        53,
        3,
        1655993245570
    ],
    [
        55,
        3,
        1655993245578
    ],
    [
        57,
        3,
        1655993245584
    ],
    [
        59,
        3,
        1655993245601
    ],
    [
        59,
        4,
        1655993245608
    ],
    [
        60,
        4,
        1655993245616
    ],
    [
        61,
        4,
        1655993245624
    ],
    [
        63,
        4,
        1655993245640
    ],
    [
        64,
        5,
        1655993245648
    ],
    [
        65,
        5,
        1655993245657
    ],
    [
        68,
        6,
        1655993245664
    ],
    [
        70,
        6,
        1655993245672
    ],
    [
        71,
        6,
        1655993245678
    ],
    [
        72,
        6,
        1655993245686
    ],
    [
        74,
        6,
        1655993245694
    ],
    [
        75,
        6,
        1655993245702
    ],
    [
        75,
        7,
        1655993245710
    ],
    [
        77,
        7,
        1655993245718
    ],
    [
        78,
        7,
        1655993245746
    ],
    [
        79,
        7,
        1655993245754
    ],
    [
        80,
        7,
        1655993245763
    ],
    [
        81,
        7,
        1655993245777
    ],
    [
        83,
        7,
        1655993245784
    ],
    [
        84,
        7,
        1655993245800
    ],
    [
        85,
        7,
        1655993245808
    ],
    [
        86,
        7,
        1655993245817
    ],
    [
        87,
        7,
        1655993245824
    ],
    [
        88,
        8,
        1655993245840
    ],
    [
        89,
        9,
        1655993245859
    ],
    [
        90,
        9,
        1655993245862
    ],
    [
        91,
        9,
        1655993245871
    ],
    [
        92,
        9,
        1655993245886
    ],
    [
        93,
        9,
        1655993245894
    ],
    [
        93,
        10,
        1655993245902
    ],
    [
        94,
        10,
        1655993245910
    ],
    [
        95,
        10,
        1655993245926
    ],
    [
        96,
        10,
        1655993245934
    ],
    [
        97,
        10,
        1655993245942
    ],
    [
        98,
        10,
        1655993245956
    ],
    [
        99,
        10,
        1655993245964
    ],
    [
        100,
        11,
        1655993245972
    ],
    [
        101,
        12,
        1655993245980
    ],
    [
        103,
        12,
        1655993245996
    ],
    [
        104,
        12,
        1655993246005
    ],
    [
        105,
        12,
        1655993246012
    ],
    [
        106,
        12,
        1655993246020
    ],
    [
        106,
        13,
        1655993246028
    ],
    [
        108,
        13,
        1655993246036
    ],
    [
        109,
        13,
        1655993246044
    ],
    [
        110,
        13,
        1655993246059
    ],
    [
        111,
        13,
        1655993246066
    ],
    [
        111,
        14,
        1655993246075
    ],
    [
        112,
        14,
        1655993246084
    ],
    [
        113,
        14,
        1655993246091
    ],
    [
        114,
        15,
        1655993246098
    ],
    [
        115,
        15,
        1655993246107
    ],
    [
        116,
        15,
        1655993246114
    ],
    [
        117,
        15,
        1655993246124
    ],
    [
        119,
        15,
        1655993246130
    ],
    [
        120,
        15,
        1655993246136
    ],
    [
        121,
        15,
        1655993246144
    ],
    [
        123,
        15,
        1655993246152
    ],
    [
        124,
        15,
        1655993246160
    ],
    [
        125,
        16,
        1655993246168
    ],
    [
        126,
        16,
        1655993246178
    ],
    [
        127,
        16,
        1655993246185
    ],
    [
        129,
        16,
        1655993246201
    ],
    [
        130,
        16,
        1655993246217
    ],
    [
        130,
        17,
        1655993246234
    ],
    [
        131,
        17,
        1655993246238
    ],
    [
        132,
        17,
        1655993246247
    ],
    [
        133,
        17,
        1655993246271
    ],
    [
        134,
        18,
        1655993246290
    ],
    [
        135,
        18,
        1655993246306
    ],
    [
        136,
        18,
        1655993246344
    ],
    [
        137,
        18,
        1655993246364
    ],
    [
        138,
        19,
        1655993246377
    ],
    [
        139,
        19,
        1655993246384
    ],
    [
        140,
        19,
        1655993246432
    ],
    [
        141,
        19,
        1655993246478
    ],
    [
        141,
        20,
        1655993246498
    ],
    [
        142,
        20,
        1655993246506
    ],
    [
        143,
        20,
        1655993246528
    ],
    [
        144,
        20,
        1655993246548
    ],
    [
        145,
        20,
        1655993246580
    ],
    [
        145,
        21,
        1655993246748
    ],
    [
        145,
        22,
        1655993246792
    ]
]

def show_plt():
    for i in range(1, 4):
        trail_list = eval(f"trail_{i}")
        print(f"trail_{i}")
        x_trail = []
        y_trail = []
        t_trail = []
        for trail in trail_list:
            x = trail[0]
            y = trail[1]
            t = trail[2]
            x_trail.append(x)
            y_trail.append(y)
            t_trail.append(t)
        print(np.diff(x_trail))
        plt.plot(t_trail, x_trail)
    plt.show()


def easeOutQuint(x):
    return (1 - math.pow(1 - x, 5))


# 3
def get_trail(move_distence, show=False):
    def __set_pt_time(_dist):
        if _dist < 100:
            __need_time = int(random.uniform(500, 1500))
        else:
            __need_time = int(random.uniform(1000, 2000))
        __end_pt_time = []
        __move_pt_time = []
        __pos_z = []

        total_move_time = __need_time * random.uniform(0.8, 0.9)
        start_point_time = random.uniform(110, 200)
        __start_pt_time = [int(start_point_time)]

        sum_move_time = 0

        _tmp_total_move_time = total_move_time
        while True:
            delta_time = random.uniform(15, 20)
            if _tmp_total_move_time < delta_time:
                break

            sum_move_time += delta_time
            _tmp_total_move_time -= delta_time
            __move_pt_time.append(int(start_point_time + sum_move_time))

        last_pt_time = __move_pt_time[-1]
        __move_pt_time.append(int(last_pt_time + _tmp_total_move_time))

        sum_end_time = start_point_time + total_move_time
        other_point_time = __need_time - sum_end_time
        end_first_ptime = other_point_time / 2

        while True:
            delta_time = random.uniform(110, 200)
            if end_first_ptime - delta_time <= 0:
                break

            end_first_ptime -= delta_time
            sum_end_time += delta_time
            __end_pt_time.append(int(sum_end_time))

        __end_pt_time.append(int(sum_end_time + (other_point_time / 2 + end_first_ptime)))
        __pos_z.extend(__start_pt_time)
        __pos_z.extend(__move_pt_time)
        __pos_z.extend(__end_pt_time)
        return __pos_z

    def __get_pos_y(point_count):
        _pos_y = []
        start_y = random.randint(-1, 1)
        end_y = random.randint(-13, -5)
        x = np.linspace(start_y, end_y, point_count)
        for _, val in enumerate(x):
            _pos_y.append(int(val))

        return _pos_y

    time_list = __set_pt_time(move_distence)
    trail_length = len(time_list)
    t = np.linspace(-0.5, 1, trail_length)  # t
    mult = move_distence / 7.59375
    x = [int(mult * (easeOutQuint(i) + 6.59375)) for i in t]
    y = __get_pos_y(trail_length)
    # t=-0.5 x=-6.59375
    # t=1 x=7.59375
    delta_pt = abs(np.random.normal(scale=3, size=trail_length))
    for index in range(len(delta_pt)):
        change_x = int(x[index] + delta_pt[index])
        if index + 1 < trail_length and x[index + 1] > change_x:
            x[index] = change_x

    if show:
        delta_t = [i for i in range(trail_length)]
        plt.plot(delta_t, delta_pt, color='green')
        # plt.plot(time_list, x, color='red')
        plt.show()
    result = []
    print(x[-1] - x[0])
    for idx in range(trail_length):
        result.append([x[idx], y[idx], time_list[idx]])
    return result


def showeaseOutQuint(distance):
    def func(x):
        return 1 - pow(1 - x, 5) + 6.59375

    print(func(-0.5), func(1))
    x = np.linspace(-0.5, 1, 70)
    y = [distance / 7.59375 * func(i) for i in x]
    delta_pt = abs(np.random.normal(scale=1.1, size=70))
    for index in range(len(delta_pt)):
        change_y = int(x[index] + delta_pt[index])
        if index + 1 < 70 and y[index + 1] > change_y:
            y[index] += change_y
    t = np.linspace(100, 1200, 70)
    plt.plot(t, y)
    plt.show()


if __name__ == '__main__':
    show_plt()
    # distance = 100
    # # showeaseOutQuint(distance)
    # result = get_trail(random.randint(100, 200), False)
    # print(result)
    # """
    # 1. 收集轨迹
    # 2. 画出轨迹图像 找缓动函数相同形状
    # 3. 绘制缓动函数 找到符合形状的作用域
    # 4. 找到作用域内最大值 最小值 上下移动 *距离系数
    # 5. 替换时间（t）轴为自己的
    # 6. 高斯函数增加波动
    # 7. 细节修改 x轴 t轴 np.diff对比
    # """
